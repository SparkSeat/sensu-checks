#!/usr/bin/env ruby

require_relative '../base'
require 'socket'
require 'timeout'

class CheckPort < Check
  check_name 'Check Port'

  option :tcp,
         short: '-t <port>',
         description: 'Check a TCP port'

  option :udp,
         short: '-u <port>',
         description: 'Check a UDP port'

  option :host,
         short: '-h <host>',
         description: 'The host to try and connect to',
         default: 'localhost'

  option :timeout,
         short: '-s <timeout>',
         description: 'Timeout in seconds',
         default: '5'

  def run
    if config[:tcp]
      check_tcp
    elsif config[:udp]
      check_udp
    else
      unknown 'No port/protocol specified'
    end
  rescue => exception
    # Can't use magic $! variable when rescuing an entire method for some reason
    critical map_error_message(exception)
  end

  private

  def check_tcp
    Timeout.timeout(config[:timeout].to_i) do
      TCPSocket.new(config[:host], config[:tcp].to_i).close
      ok "Successful connection to #{config[:tcp]}/tcp"
    end
  end

  def check_udp
    critical 'Not implemented! UDP Checking is really hard'
  end

  def map_error_message(exception)
    case exception.class.to_s
    when 'Errno::ENETUNREACH'  then 'Network Unreachable'
    when 'Errno::ECONNREFUSED' then 'Connection Refused'
    when 'Errno::EHOSTUNREACH' then 'Host Unreachable'
    when 'Timeout::Error'      then 'Socket Timeout'
    else "Unhandled #{exception.class}: #{exception.message}"
    end
  end
end
