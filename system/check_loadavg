#!/usr/local/rvm/wrappers/default/ruby
# Inspired by sensu-community-plugins:system/check-load.rb

require_relative '../base'

#
# Monitor the load average of the system and go warning or critical if
# specified limits are reached.
#
class CheckLoad < Check
  check_name 'Load Average'

  option :warn,
         short: '-w <1m>,<5m>,<15m>',
         description: 'Warning threshold for 1/5/15 min loadavg',
         proc: proc { |a| a.split(',').map(&:to_f) },
         default: [10, 10, 20]

  option :crit,
         short: '-c <1m>,<5m>,<15m>',
         description: 'Critical threshold for 1/5/15 min loadavg',
         proc: proc { |a| a.split(',').map(&:to_f) },
         default: [25, 50, 75]

  option :per_core,
         short: '-p',
         long: '--per-core',
         description: 'Thresholds are per core',
         boolean: true,
         default: false

  def run
    unknown 'Could not interrogate /proc' if failed?
    message averages.join(', ')
    critical if exceed? config[:crit]
    warning  if exceed? config[:warn]
    ok
  end

  private

  def failed?
    averages.nil? || cores.zero?
  end

  # Determine if any threshold is exceeded
  def exceed?(thresholds)
    averages.zip(thresholds).any? { |a, t| a > t }
  end

  def cores
    `grep -sc ^processor /proc/cpuinfo`.to_i rescue 0
  end

  def divide_by_cores
    config[:per_core] ? cores : 1
  end

  # Get the load averages, divided per core if required
  def averages
    @_averages ||= open('/proc/loadavg')
                   .read
                   .split
                   .take(3)
                   .map { |a| (a.to_f / divide_by_cores).round(2) }
    rescue
      nil
  end
end
