#!/usr/local/rvm/wrappers/default/ruby

require_relative '../base'
require 'open3'
require 'socket'

# Test database consistency between server 1 and server 2
class CheckConsistency < Check
  check_name 'Check Database Consistency'

  option :server1,
         long: '--server1 <hostname>',
         description: 'Check a TCP port',
         required: true

  option :username,
         long: '--username <username>',
         description: 'Username for database user',
         required: true

  option :password,
         long: '--password <password>',
         description: 'Password for database user',
         required: true

  option :database,
         long: '--database <database>',
         description: 'The database schema to check',
         required: true

  def run
    script = check_script(config)
    stdout, stderr, _status = Open3.capture3(script)

    return critical stderr if stderr && stderr != ''

    parse_results(stdout)
  end

  private

  def hostname
    Socket.gethostname.split('.').first
  end

  def parse_results(stdout)
    return critical stdout if stdout =~ /ERROR/
    return ok stdout if stdout =~ /Databases are consistent/

    results = parse_sql(stdout)

    if results[:total] < 3
      ok summary(results, stdout)
    elsif results[:total] < 5
      warn summary(results, stdout)
    else
      critical summary(results, stdout)
    end

    return unknown stdout
  end

  def parse_sql(stdout)
    inserts = stdout.scan(/INSERT INTO `SparkSeat`\.`(.+?)`/)
    updates = stdout.scan(/UPDATE `SparkSeat`\.`(.+?)`/)
    deletes = stdout.scan(/DELETE FROM `SparkSeat`\.`(.+?)`/)

    results = {
      inserts: Hash[inserts.flatten.group_by(&:to_s).map { |k, v| [k, v.length] }],
      updates: Hash[updates.flatten.group_by(&:to_s).map { |k, v| [k, v.length] }],
      deletes: Hash[deletes.flatten.group_by(&:to_s).map { |k, v| [k, v.length] }]
    }

    results[:inserts]['total'] = inserts.size
    results[:updates]['total'] = updates.size
    results[:deletes]['total'] = deletes.size

    results[:total] = results[:inserts]['total'] + results[:updates]['total'] + results[:deletes]['total']

    results
  end

  def summary(results, stdout)
  <<-EOF
Consistency Check Finished.

#{results[:total]} issues found:

Missing Records:    #{results[:inserts].to_json}
Updated Records:    #{results[:updates].to_json}
Extraneous Records: #{results[:deletes].to_json}

Full output follows:

#{stdout}
EOF
  end

  def check_script(config)
    server1  = config[:server1]
    server2  = "#{hostname}.hive.sparkseat.com"
    username = config[:username]
    password = config[:password]
    database = config[:database]

    <<-EOF
mysqldbcompare --changes-for=server2                        \
               --run-all-tests                              \
               --skip-diff                                  \
               --server1=#{username}:#{password}@#{server1} \
               --server2=#{username}:#{password}@#{server2} \
               --difftype=sql                               \
               #{database}:#{database}
    EOF
  end
end
